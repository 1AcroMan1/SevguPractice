using System.Globalization;
using System;
using System.Collections.Generic;

//CREATE DATABASE SevguPracrice
namespace ForProj2
{
    class Program
    {
        static void Main(string[] args)
        {
            StorableInfo st = new StorableInfo();
            st.GenerateAllValuesForDB();
            Stats stats = new Stats();
            stats.UpdateStats();
            MoneyHolder moneyHolder = new MoneyHolder();
            moneyHolder.exp = 10000;
            //stats.Upgrade("Strength", moneyHolder);
            Console.WriteLine($"{stats.Strength}, {moneyHolder.exp}");
            //Test t = new Test();
            //t.test();
        }
    }
    //class Test
    //{
    //    public void test()
    //    {
    //        List<float> value = new List<float>();
    //        for (int i = 0; i < 50; i++)
    //        {
    //            if (i == 0)
    //            {
    //                value.Add(100);
    //            }
    //            else
    //            {
    //                value.Add(value[i - 1] + (100 - (i*100 / 80)));
    //                Console.WriteLine($"{ value[i]}, lvl: {i}");
    //            }
    //        }
    //    }
    //}
    class MoneyHolder
    {
        public float exp { get; set; }
        private float recognizedExp;
        public void DecreaseMoney(float cost)
        {
            if (exp >= 0)
            {
                exp -= cost;
            }
        }
        public void RecognizeAndReturn(bool RecOrRet)
        {
            if(RecOrRet)
            {
                exp = recognizedExp;
                recognizedExp = 0;
            }
            else
            {
                recognizedExp = exp;
            }
        }
    }
    class Stats
    {
        public float Strength { get; private set; }
        public float MaxHp { get; private set; }
        public float MaxStamina { get; private set; }
        public float MaxMana { get; private set; }
        public float CritChance { get; private set; }
        public float CritDamage { get; private set; }
        public float Speed { get; private set; }
        public float Intellegence { get; private set; }
        public float Haste { get; private set; }
        private List<float> RecognizedStats;

        //2 этап - вызов всех улучшений по клику по кнопке
        public void Upgrade(string skillName, MoneyHolder mh)
        {
            GetValuesFromDB db = new GetValuesFromDB();
            UpgradeStat us = new UpgradeStat();
            us.Upgrade(skillName, db.DbGetCurrentStatValue(skillName), mh, db);
            UpdateStats();
        }
        private void RecognizeAndReturn(bool RecOrRet)
        {
            if (RecOrRet)
            {
                List<string> str = new List<string>() { "Strength", "MaxHp", "MaxStamina", "MaxMana", "CritChance", "CritDamage", "Speed", "Intellegence", "Haste" };
                GetValuesFromDB db = new GetValuesFromDB();
                for (int i=0; i<RecognizedStats.Count;i++)
                {
                    db.DbSetStats(str[i], RecognizedStats[i]);
                }
            }
            else
            {
                RecognizedStats = new List<float>() { Strength, MaxHp, MaxStamina, MaxMana, CritChance, CritDamage, Speed, Intellegence, Haste };
            }
        }
        //1 этап - вызов этой штуки при начале улучшения
        public void InitializeFalseUpgrade(MoneyHolder mh)
        {
            mh.RecognizeAndReturn(false);
            RecognizeAndReturn(false);
        }
        //3 этап - вызов этой штуки при клике на кнопку подтвердить или отклонить улучшение. bool accepted - true, если пользователь согласен на улучшение
        public void AcceptOrDenyFalseUpgrade(bool accepted, MoneyHolder mh)
        {
            if (!accepted)
            {
                mh.RecognizeAndReturn(true);
                RecognizeAndReturn(true);
            }
        }
        public void UpdateStats()
        {
            try
            {
                GetValuesFromDB db = new GetValuesFromDB();
                Dictionary<string, float> dic = db.DbGetHeroStats();
                Strength = dic["Strength"];
                MaxHp = dic["MaxHp"];
                MaxStamina = dic["MaxStamina"];
                MaxMana = dic["MaxMana"];
                CritChance = dic["CritChance"];
                CritDamage = dic["CritDamage"];
                Speed = dic["Speed"];
                Intellegence = dic["Intellegence"];
                Haste = dic["Haste"];
                Console.WriteLine("Table cur is fine");
            }
            catch
            {
                try
                {
                    DbHelper.ExecuteWithoutAnswer("DROP TABLE HeroCurrentStats");
                    Console.WriteLine("Table cur deleted");
                }
                catch { }//Таблицы не существует, нечего удалять и делать в кэтче нечего тоже
                Console.WriteLine("Table cur not exist");
                DbHelper.ExecuteWithoutAnswer("CREATE TABLE HeroCurrentStats (skillName VARCHAR(128), skillLvl int, statvalue float) ");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Strength'"}, 0, 5)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxHp'"}, 0, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxStamina'"}, 0, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxMana'"}, 0, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'CritChance'"}, 0, 0.1)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'CritDamage'"}, 0, 1.5)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Speed'"}, 0, 3)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Intellegence'"}, 0, 5)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Haste'"}, 0, 5)");
            }
        }
    }

    class GetValuesFromDB
    {
        public float DbGetCost(string skillName, float statValue)
        {
            int lvl = int.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"skillLvl"} FROM {"HeroStats"} WHERE {"skillName"} = '{skillName}' AND {"statvalue"} = {statValue.ToString(CultureInfo.InvariantCulture)}"));
            float cost = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"UpgradeCost"} FROM {"HeroStats"} WHERE {"skillName"} = '{skillName}' AND {"skillLvl"} = {lvl + 1}"));
            return cost;
        }
        private void DbSetStats(string skillName, int lvl, float value)
        {
            DbHelper.ExecuteWithoutAnswer($"UPDATE {"HeroCurrentStats"} SET {"skillLvl"} = {lvl}, {"statvalue"} = {value.ToString(CultureInfo.InvariantCulture)} WHERE {"skillName"} = '{skillName}'");
        }
        public void DbSetStats(string skillName, float value)
        {
            int lvl = int.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"skillLvl"} FROM {"HeroStats"} WHERE {"skillName"} = '{skillName}' AND {"statvalue"} = {value.ToString(CultureInfo.InvariantCulture)}"));
            DbHelper.ExecuteWithoutAnswer($"UPDATE {"HeroCurrentStats"} SET {"skillLvl"} = {lvl}, {"statvalue"} = {value.ToString(CultureInfo.InvariantCulture)} WHERE {"skillName"} = '{skillName}'");
        }
        public float DbGetNextStatValue(string skillName, float statValue)
        {
            int lvl = int.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"skillLvl"} FROM {"HeroStats"} WHERE {"skillName"} = '{skillName}' AND {"statvalue"} = {statValue.ToString(CultureInfo.InvariantCulture)}"));
            float nextval = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroStats"} WHERE {"skillName"} = '{skillName}' AND {"skillLvl"} = {lvl + 1}"));
            DbSetStats(skillName, lvl + 1, nextval);
            return nextval;
        }
        public float DbGetCurrentStatValue(string skillName)
        {
            return float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = '{skillName}'"));
        }
        public Dictionary<string, float> DbGetHeroStats()
        {
            Dictionary<string, float> dict = new Dictionary<string, float>();
            dict.Add("Strength", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'Strength'"}")));
            dict.Add("MaxHp", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'MaxHp'"}")));
            dict.Add("MaxStamina", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'MaxStamina'"}")));
            dict.Add("MaxMana", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'MaxMana'"}")));
            dict.Add("CritChance", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'CritChance'"}")));
            dict.Add("CritDamage", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName   "} = {"'CritDamage'"}")));
            dict.Add("Speed", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'Speed'"}")));
            dict.Add("Intellegence", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'Intellegence'"}")));
            dict.Add("Haste", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"statvalue"} FROM {"HeroCurrentStats"} WHERE {"skillName"} = {"'Haste'"}")));
            return dict;
        }
    }
    class UpgradeStat
    {
        public void Upgrade(string skillName, float statValue, MoneyHolder mh, GetValuesFromDB db)
        {
            float cost = db.DbGetCost(skillName, statValue);
            if (mh.exp > cost)
            {
                try
                {
                    statValue = db.DbGetNextStatValue(skillName, statValue);
                    mh.DecreaseMoney(cost);
                    //Console.WriteLine("upgrade sucssessfull");
                }
                catch
                {
                    //Debug.Log("MaxLvlReached");
                }
            }
        }
    }
}