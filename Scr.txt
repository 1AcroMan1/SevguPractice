using System;
using System.Collections.Generic;
using System.Linq;
class Stats
{
    public float Str { get; private set; }
    public float MaxHp { get; private set; }
    public float Stamina { get; private set; }
    public float Mana { get; private set; }

    public void Upgrade(int statID, float statValue, MoneyHolder mh)
    {
        StorableInfo storable = new StorableInfo();
        storable.GenerateValsForAllStats();
        UpgradeStat us = new UpgradeStat();
        float? value = us.Upgrade(statID, statValue, mh, storable);
        if (value != null)
        {
            float val = float.Parse(value.ToString());
            switch (statID)
            {
                case 0:
                    Str = val;
                    break;
                case 1:
                    MaxHp = val;
                    break;
                case 2:
                    Stamina = val;
                    break;
                case 3:
                    Mana = val;
                    break;
            }
        }
    }
}

//class GetValuesFromDB
//{
//    public float DbGetCost()
//    {
//        // Opendbcon
//        //int lvl = SELECT lvl FROM tablename WHERE id = smth AND statvalue = smth
//        //SELECT UpgradeCost FROM tablename WHERE id = smth AND lvl = "'lvl+1'"
//        // Closedbcon
//        return 0;
//    }
//    private void DbSetStats(int statID, int lvl)
//    {
//        // Opendbcon
//        //UPDATE tableID SET lvl = "'lvl'" WHERE statID = "'statID'"; 
//        // Closedbcon
//    }
//    public float DbGetNextStatValue(int statID, float statValue)
//    {
//        // Opendbcon
//        //int lvl = SELECT lvl FROM tablename WHERE id = smth AND statvalue = smth
//        //SELECT UpgradeCost FROM tablename WHERE id = smth AND lvl = lvl+1
//        // Closedbcon
//        return 0;
//    }
//}

//FoundFromStorable - ужасная замена класса GetValuesFromDB
class FoundFromStorable
{
    public float GetCost(StorableInfo storable, float statValue, float statID)
    {
        switch (statID)
        {
            case 0:
                {
                    return storable.StrConsArr[storable.StrValueArr.IndexOf(statValue)];
                }
            case 1:
                {
                    return storable.HpConsArr[storable.HpValueArr.IndexOf(statValue)];
                }
            case 2:
                {
                    return storable.StaminaConsArr[storable.StaminaValueArr.IndexOf(statValue)];
                }
            case 3:
                {
                    return storable.ManaConsArr[storable.ManaValueArr.IndexOf(statValue)];
                }
        }
        return float.MaxValue;
    }
    public float GetNextStatValue(StorableInfo storable, float statValue, int statID)
    {
        switch (statID)
        {
            case 0:
                {
                    return storable.StrValueArr[storable.StrValueArr.IndexOf(statValue) + 1];
                }
            case 1:
                {
                    return storable.HpValueArr[storable.HpValueArr.IndexOf(statValue) + 1];
                }
            case 2:
                {
                    return storable.StaminaValueArr[storable.StaminaValueArr.IndexOf(statValue) + 1];
                }
            case 3:
                {
                    return storable.ManaValueArr[storable.ManaValueArr.IndexOf(statValue) + 1];
                }
        }
        return 0;
    }
}
class UpgradeStat
{
    public float? Upgrade(int statID, float statValue, MoneyHolder mh, StorableInfo storable)
    {
        FoundFromStorable fs = new FoundFromStorable();
        float cost = fs.GetCost(storable, statValue, statID);
        if (mh.money > cost)
        {
            try
            {
                statValue = fs.GetNextStatValue(storable, statValue, statID);
                mh.DecreaseMoney(cost);
                Console.WriteLine("upgrade sucssessfull");
            }
            catch
            {
                //Debug.Log("MaxLvlReached");
                return null;
            }
        }
        else
        {
            return null;
        }
        return statValue;
    }
}
}
}










    class StorableInfo
    {
        //cons - consumable (потребление денег за прокачку)
        public List<float> StrConsArr { get; private set; } = new List<float>();
        public List<float> StrValueArr { get; private set; } = new List<float>();

        public List<float> HpConsArr { get; private set; } = new List<float>();
        public List<float> HpValueArr { get; private set; } = new List<float>();

        public List<float> StaminaConsArr { get; private set; } = new List<float>();
        public List<float> StaminaValueArr { get; private set; } = new List<float>();

        public List<float> ManaConsArr { get; private set; } = new List<float>();
        public List<float> ManaValueArr { get; private set; } = new List<float>();
        public void GenerateValsForAllStats()
        {
            List<List<float>> StrHar = new List<List<float>>();
            StrHar = GenerateValues(StrConsArr, StrValueArr, 100, 5, 10, 1, 100);
            StrConsArr = StrHar.First();
            StrValueArr = StrHar.Last();

            List<List<float>> HpHar = new List<List<float>>();
            HpHar = GenerateValues(HpConsArr, HpValueArr, 100, 100, 10, 10, 100);
            HpConsArr = HpHar.First();
            HpValueArr = HpHar.Last();

            List<List<float>> StaminaHar = new List<List<float>>();
            StaminaHar = GenerateValues(StaminaConsArr, StaminaValueArr, 100, 5, 10, 1, 100);
            StaminaConsArr = StaminaHar.First();
            StaminaValueArr = StaminaHar.Last();

            List<List<float>> ManaHar = new List<List<float>>();
            ManaHar = GenerateValues(ManaConsArr, ManaValueArr, 100, 5, 10, 1, 100);
            ManaConsArr = ManaHar.First();
            ManaValueArr = ManaHar.Last();
        }
        public void GetValuesFromFile()
        {

        }

        //consIncrease - увеличение стоимости в %
        //valueIncrease - увеличение значения статистики в еденицах
        private List<List<float>> GenerateValues(List<float> cons, List<float> value, float BaseCons, float BaseValue, float consIncrease, float valueIncrease, float MaxLvl)
        {
            List<List<float>> Har = new List<List<float>>();
            for (int i = 0; i < MaxLvl; i++)
            {
                if (i == 0)
                {
                    cons.Add(BaseCons);
                    value.Add(BaseValue);
                }
                else
                {
                    cons.Add(cons.Last() * consIncrease / 100);
                    value.Add(value.Last() + valueIncrease);
                }
            }
            Har.Add(cons);
            Har.Add(value);
            return Har;
        }
    }
