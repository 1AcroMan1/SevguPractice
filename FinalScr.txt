using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.SqlClient;
using System.Globalization;
namespace ForProj2
{
    class Program
    {
        static void Main(string[] args)
        {
            StorableInfo st = new StorableInfo();
            st.GenerateAllValuesForDB();
            //Test t = new Test();
            //t.test();
        }
    }
    //class Test
    //{
    //    public void test()
    //    {
    //        List<float> value = new List<float>();
    //        for (int i = 0; i < 50; i++)
    //        {
    //            if (i == 0)
    //            {
    //                value.Add(100);
    //            }
    //            else
    //            {
    //                value.Add(value[i - 1] + (100 - (i*100 / 80)));
    //                Console.WriteLine($"{ value[i]}, lvl: {i}");
    //            }
    //        }
    //    }
    //}
    class MoneyHolder
    {
        public float money { get; private set; }
        public void DecreaseMoney(float cost)
        {
            if (money >= 0)
            {
                money -= cost;
            }
        }
    }
    class Stats
    {
        public float Strength { get; private set; }
        public float MaxHp { get; private set; }
        public float MaxStamina { get; private set; }
        public float MaxMana { get; private set; }
        public float CritChance { get; private set; }
        public float CritDamage { get; private set; }
        public float Speed { get; private set; }
        public float Intelegence { get; private set; }
        public float Haste { get; private set; }


        public void Upgrade(string skillName, MoneyHolder mh)
        {

            GetValuesFromDB db = new GetValuesFromDB();
            UpgradeStat us = new UpgradeStat();
            us.Upgrade(skillName, db.DbGetCurrentStatValue(skillName), mh);
            UpdateStats();
        }
        public void UpdateStats()
        {
            try
            {
                GetValuesFromDB db = new GetValuesFromDB();
                Dictionary<string, float> dic = db.DbGetHeroStats();
                Strength = dic["Strength"];
                MaxHp = dic["MaxHp"];
                MaxStamina = dic["MaxStamina"];
                MaxMana = dic["MaxMana"];
                CritChance = dic["CritChance"];
                CritDamage = dic["CritDamage"];
                Speed = dic["Speed"];
                Intelegence = dic["Intelegence"];
                Haste = dic["Haste"];
            }
            catch
            {
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Strength'"}, 0, 5, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxHp'"}, 0, 100, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxStamina'"}, 0, 100, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'MaxMana'"}, 0, 100, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'CritChance'"}, 0, 0.1, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'CritDamage'"}, 0, 1.5, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Speed'"}, 0, 3, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Intelegence'"}, 0, 5, 100)");
                DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroCurrentStats VALUES({"'Haste'"}, 0, 5, 100)");
            }
        }
    }

    class GetValuesFromDB
    {
        public float DbGetCost(string skillName, float statValue)
        {
            int lvl = int.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'skillLvl'"} FROM {"'HeroStats'"} WHERE {"'skillName'"} = {skillName} AND {"'statvalue'"} = {statValue}"));
            float cost = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'UpgradeCost'"} FROM {"'HeroStats'"} WHERE {"'skillName'"} = {skillName} AND {"'skillLvl'"} = {lvl + 1}"));
            return cost;
        }
        private void DbSetStats(string skillName, int lvl, float value)
        {
            string valueToStr = value.ToString(CultureInfo.InvariantCulture);
            DbHelper.ExecuteWithoutAnswer($"UPDATE {"'HeroCurrentStats'"} SET {"'skillLvl'"} = {lvl}, {"'statvalue'"} = {valueToStr} WHERE {"'skillName'"} = {skillName}");
        }
        public float DbGetNextStatValue(string skillName, float statValue)
        {
            int lvl = int.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'skillLvl'"} FROM {"'HeroStats'"} WHERE {"'skillName'"} = {skillName} AND {"'statvalue'"} = {statValue}"));
            float nextval = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroStats'"} WHERE {"'skillName'"} = {skillName} AND {"'skillLvl'"} = {lvl + 1}"));
            DbSetStats(skillName, lvl + 1, nextval);
            return nextval;
        }
        public float DbGetCurrentStatValue(string skillName)
        {
            return float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {skillName}"));
        }
        public Dictionary<string, float> DbGetHeroStats()
        {
            Dictionary<string, float> dict = new Dictionary<string, float>();
            dict.Add("Strength", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'Strengtch'"}")));
            dict.Add("MaxHP", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'MaxHP'"}")));
            dict.Add("MaxStamina", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'MaxStamina'"}")));
            dict.Add("MaxMana", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'MaxMana'"}")));
            dict.Add("CritChance", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'CritChance'"}")));
            dict.Add("CritDamage", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'CritDamage'"}")));
            dict.Add("Speed", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'Speed'"}")));
            dict.Add("Intellegence", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'Intellegence'"}")));
            dict.Add("Haste", float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT {"'statvalue'"} FROM {"'HeroCurrentStats'"} WHERE {"'skillName'"} = {"'Haste'"}")));
            return dict;
        }
    }
    class UpgradeStat
    {
        public void Upgrade(string skillName, float statValue, MoneyHolder mh)
        {
            GetValuesFromDB db = new GetValuesFromDB();
            float cost = db.DbGetCost(skillName, statValue);
            if (mh.money > cost)
            {
                try
                {
                    statValue = db.DbGetNextStatValue(skillName, statValue);
                    mh.DecreaseMoney(cost);
                    //Console.WriteLine("upgrade sucssessfull");
                }
                catch
                {
                    //Debug.Log("MaxLvlReached");
                }
            }
        }
    }
}


using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ForProj2
{
    public static class DbHelper
    {
        private static string connection = GetConnectionString();
        static private string GetConnectionString()
        {
            //local
            //return @"Data Source = (local)\SQLEXPRESS;Initial Catalog = SpaceDataBase; Integrated Security = True; TrustServerCertificate = True";
            //server
            return @"Data Source=DESKTOP-9T0H6F4\SQLEXPRESS;Initial Catalog=SevguPractice;Integrated Security=True;Encrypt=True;TrustServerCertificate=True";
        }
        public static void ExecuteWithoutAnswer(string str)
        {
            using (SqlConnection conn = new SqlConnection(connection))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(str, conn);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                conn.Close();
            }
        }
        public static List<object> ExecuteWithAnswer(string str)
        {
            using (SqlConnection conn = new SqlConnection(connection))
            {
                conn.Open();
                List<object> result = new List<object>();
                SqlCommand cmd = new SqlCommand(str, conn);
                try
                {
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            result.Add(reader.GetValue(0));
                            result.Add(reader.GetValue(1));
                            result.Add(reader.GetValue(2));
                            result.Add(reader.GetValue(3));
                            result.Add(reader.GetValue(4));
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                conn.Close();
                return result;
            }
        }
        public static string ExecuteQueryWithAnswer(string query)
        {
            using (SqlConnection conn = new SqlConnection(connection))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(query, conn);
                var answer = cmd.ExecuteScalar();
                conn.Close();

                if (answer != null) return answer.ToString();
                else return null;
            }
        }
    }

}


using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ForProj2
{
    class StorableInfo
    {      
        //Вызывать это для генерации в бд
        public void GenerateAllValuesForDB()
        {
            GenerateValuesForDB("Strength", 100, 5, 10, 1, 50);
            GenerateValuesForDB("MaxHP", 100, 100, 10, 10, 50);
            GenerateValuesForDB("MaxStamina", 100, 5, 10, 1, 50);
            GenerateValuesForDB("MaxMana", 100, 100, 10, 10, 50);
            GenerateValuesForDB("Speed", 100, 5, 10, 1, 50);
            GenerateValuesForDB("CritChance", 100, 0.1f, 10, 0.1f, 50);
            GenerateValuesForDB("CritDamage", 100, 1.5f, 10, 0.1f, 50);
            GenerateValuesForDB("Intellegence", 100, 5, 10, 1, 50);
            GenerateValuesForDB("Haste", 100, 5, 10, 1, 50);
        }

        public void GenerateValuesForDB(string skillName, float BaseCons, float BaseValue, float consIncrease, float valueIncrease, float MaxLvl)
        {
            for (int i = 0; i < MaxLvl; i++)
            {
                if (i == 0)
                {
                    DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroStats VALUES('{skillName}', {i}, {BaseValue}, {BaseCons})");
                }
                else
                {
                    float curCons = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT UpgradeCost FROM HeroStats WHERE skillLvl = {i - 1} AND skillName = '{skillName}'"));
                    float curValue = float.Parse(DbHelper.ExecuteQueryWithAnswer($"SELECT statvalue FROM HeroStats WHERE skillLvl = {i - 1} AND skillName = '{skillName}'"));
                    //Тут формулы
                    float cons = curCons + (curCons * consIncrease / 100);
                    float value = curValue + valueIncrease-(i*BaseValue/80);
                    //
                    string consStr = cons.ToString(CultureInfo.InvariantCulture);
                    string valueStr = value.ToString(CultureInfo.InvariantCulture);
                    DbHelper.ExecuteWithoutAnswer($"INSERT INTO HeroStats VALUES('{skillName}', {i}, {valueStr}, {consStr})");
                }
            }
        }

        //consIncrease - увеличение стоимости в %
        //valueIncrease - увеличение значения статистики в еденицах
        private List<List<float>> GenerateValues(List<float> cons, List<float> value, float BaseCons, float BaseValue, float consIncrease, float valueIncrease, float MaxLvl)
        {
            List<List<float>> Har = new List<List<float>>();
            for (int i = 0; i < MaxLvl; i++)
            {
                if (i == 0)
                {
                    cons.Add(BaseCons);
                    value.Add(BaseValue);
                }
                else
                {
                    cons.Add(cons.Last() * consIncrease / 100);
                    value.Add(value.Last() + valueIncrease);
                }
            }
            Har.Add(cons);
            Har.Add(value);
            return Har;
        }
    }
}